library(SWATplusR)
library(dplyr)
library(dygraphs)
library(ggplot2)
library(lubridate)
library(mapview)
library(plotly)
library(sf)
library(tibble)
library(tidyr)
library(purrr)
library(lhs)
library(hydroGOF)
library(fast)
library(forcats)
library(lubridate)
library(sensitivity)
library(Hmisc)
load(file='/work/OVERFLOW/RCR/sensitivity/msu_sobol/q_obs.RData')
load(file='/work/OVERFLOW/RCR/MSU/bac_obs.RData')
load(file='/work/OVERFLOW/RCR/sensitivity/msu_sobol/q_obs.RData')
load(file='/work/OVERFLOW/RCR/MSU/bac_obs.RData')
load(file = '/work/OVERFLOW/RCR/calibration/MSU/q_obs2.RData')
load(file = '/work/OVERFLOW/RCR/calibration/MSU/flux_obs.RData')
load(file = '/work/OVERFLOW/RCR/calibration/MSU/pcp_obs.RData')
load(file = '/work/OVERFLOW/RCR/calibration/MSU/pcp_obs2.RData')
load(file = '/work/OVERFLOW/RCR/calibration/MSU/bac_cal12.RData')
nse_bac <- right_join(bac_cal1$simulation$bac_out,bac_obs,by="date") %>%
select(-date) %>% select(-bacteria) %>%
map_dbl(., ~NSE(.x, bac_obs$bacteria))
sort(nse_bac, decreasing = T) %>% enframe()
nse_q <- right_join(bac_cal1$simulation$q_out,q_obs,by="date") %>%
select(-date) %>% select(-discharge) %>%
map_dbl(., ~NSE(.x, q_obs$discharge))
sort(nse_q, decreasing = T) %>% enframe()
flux_sim <- bac_cal1$simulation$bac_out[c(97:167),c(-1)]*
bac_cal1$simulation$q_out [c(97:167), c(-1)]*10^4
nse_flux <- flux_sim %>%
map_dbl(., ~NSE(.x, flux_obs[,1]))
sort(nse_flux, decreasing = T) %>% enframe()
###combine parameters and three nses
par_sim <- bac_cal1$parameter$value
par.sim.nse <- cbind(par_sim,nse_q,nse_bac,nse_flux)
dim(par.sim.nse)
#[1] 50000    21
######################
### i-- parameter index
#### sim_par: 16288*18
### wt =NSIi/sum(nse)*1
range(nse_q)
posi_length <- length(nse_q[nse_q>0]) ###16288 simulation out of 50000 nse_q great than zero
df <- par.sim.nse
df$nse_q[df$nse_q<0] <- 0
wt_q <- df$nse_q/(sum(df$nse_q))
quantiles.probs <- c(0.001,0.023,0.025,0.05,0.159,0.25,0.5,0.75,0.841,0.95,0.975,0.977,0.999)
nquantiles <- length(quantiles.probs)
par_sim_q <- array(data=NA, dim=c(18,nquantiles))
for(i in 1:18){
print(i)
par_sim_q[i,] <- wtd.quantile(df[,i],weights=wt_q, probs=quantiles.probs,normwt=TRUE)
}
###
###
###assign colnames and rownames for the dataframe
colnames(par_sim_q) <-c("1%", "2.3%","2.5%","5%", "15.9%", "25%","50%","75%","84.1%","95%","97.5%","97.7%","99.9%")
rownames(par_sim_q) <- colnames(par_sim)
write.csv(par_sim_q, file ='/home/hwu/wu_redcedar2/data_out/weighted.pars.q.csv')
##########################################################################
par.sim.bac.nse.tmp <- par.sim.nse[order(-nse_bac),]
min.bac <- par.sim.bac.nse.tmp$nse_bac[posi_length]
df<- par.sim.nse
df$nse_bac<- par.sim.nse$nse_bac+abs(min.bac) ## adjust the value to above zero
df$nse_bac[df$nse_bac<0] <- 0
wt_bac<- df$nse_bac/sum(df$nse_bac)
par_sim_bac <- array(data=NA, dim=c(18,nquantiles))
for(i in 1:18){
print(i)
par_sim_bac[i,] <- wtd.quantile(df[,i],weights=wt_bac, probs=quantiles.probs,normwt=TRUE)
}
colnames(par_sim_bac) <-c("1%", "2.3%","2.5%","5%", "15.9%", "25%","50%","75%","84.1%","95%","97.5%","97.7%","99.9%")
rownames(par_sim_bac) <- colnames(par_sim)
write.csv(par_sim_bac, file ='/home/hwu/wu_redcedar2/data_out/weighted.pars.bac.csv')
############################################################################
par.sim.flux.nse.tmp <- par.sim.nse[order(-nse_flux),]
min.flux <- par.sim.flux.nse.tmp$nse_flux[posi_length]
df<- par.sim.nse
df$nse_flux<- par.sim.nse$nse_flux+abs(min.flux) ## adjust the value to above zero
df$nse_flux[df$nse_flux<0] <- 0
wt_flux<- df$nse_flux/sum(df$nse_flux)
par_sim_flux <- array(data=NA, dim=c(18,nquantiles))
for(i in 1:18){
print(i)
par_sim_flux[i,] <- wtd.quantile(df[,i],weights=wt_flux, probs=quantiles.probs,normwt=TRUE)
}
colnames(par_sim_flux) <-c("1%", "2.3%","2.5%","5%", "15.9%", "25%","50%","75%","84.1%","95%","97.5%","97.7%","99.9%")
rownames(par_sim_flux) <- colnames(par_sim)
write.csv(par_sim_flux, file ='/home/hwu/wu_redcedar2/data_out/weighted.pars.flux.csv')
three.wt <- wt_q + wt_bac + wt_flux
wt_total <- three.wt/sum(three.wt)
wt_uniform <- 1/(wt_total*0+50000)
par_sim_total <- array(data=NA, dim=c(18,nquantiles))
for(i in 1:18){
print(i)
par_sim_total[i,] <- wtd.quantile(df[,i],weights=wt_total, probs=quantiles.probs,normwt=TRUE)
}
par_sim_total
ls
ls()
install.library(fitdistrplus)
install.packages(fitdistrplus)
install.packages(fitdistrplus)
library(MASS)
set.seed(101)
my_data <- rnorm(250, mean=1, sd=0.45)
fit <- fitdistr(my_data, densfun="normal")
fit
hist(my_data, pch=20, breaks=25, prob=TRUE, main="")
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
log_likelihood <- function(params) { -sum(dnorm(my_data, params[1], params[2], log=TRUE)) }
fit2 <- optim(c(0,1), log_likelihood)
fit2
library(fitdistrplus)
install.packages(fitdistruplus)
q()
Sys.getenv()
Sys.getenv("hwu")
library(fitdistrplus)
q()
getOption("defaultPackages")
(.packages(all.available=TRUE))
library(truncnorm)
install.packages(truncnorm)
library(fitdistrplus)
data("groundbeef", package = "fitdistrplus")
my_data <- groundbeef$serving
plot(my_data, pch=20)
plotdist(my_data, histo = TRUE, demp = TRUE)
descdist(my_data, discrete=FALSE, boot=500)
dim(my_data)
length(my_data)
descdist(par.sim.nse$CN2, discrete=FALSE, boot=500)
fit_n <- fitdist(par.sim.nse$CN2, "normal")
fit_n <- fitdist(par.sim.nse$CN2, "norm")
summary(fit_n)
denscomp(fit_n, legendtext = plot.legend)
plot.legend <- c("normal")
denscomp(fit_n, legendtext = plot.legend)
fit_n
sum(fit_n)
descdist(my_data, discrete=FALSE, boot=500)
descdist(par.sim.nse$CN2, discrete=FALSE, boot=500)
descdist(par.sim.nse$CN2, discrete=FALSE, boot=500)
fit_n <- fitdist(par.sim.nse$CN2,"norm")
summary(fit_ln)
summary(fit_n)
fit_n <- fitdist(par.sim.nse$ALPHA_BNK, "norm")
summary(fit_n)
summary(fit_n)
plot.legend <- c("normal")
denscomp(fit_n), legendtext = plot.legend)
denscomp(fit_n, legendtext = plot.legend)
ggsave("/home/hwu/wu_redcedar2/graphics/fit normal CN2")
ggsave("/home/hwu/wu_redcedar2/graphics/fitnormal_CN2.pdf")
pdf("/home/hwu/wu_redcedar2/graphics/fitnormal_CN2.pdf")
dev.off()
pdf("/home/hwu/wu_redcedar2/graphics/fitnormal_CN2.pdf")
denscomp(fit_n, legendtext = plot.legend)
denscomp(fit_n, legendtext = plot.legend)
plot.legend <- c("normal CN2")
denscomp(fit_n, legendtext = plot.legend)
q()
denscomp(fit_n, legendtext = plot.legend)
library(fitdistrplus)
fit_n <- fitdist(par.sim.nse$CN2, "norm")
summary(fit_n)
par(mfrow=c(2,2))
plot.legend <- c("normal CN2")
denscomp(fit_n, legendtext = plot.legend)
fit_n <- fitdist(par.sim.nse$CN2, "norm")
summary(fit_n)
plot.legend <- c("normal CN2")
denscomp(fit_n, legendtext = plot.legend)
library(truncnorm)
descdist(par.sim.nse[,1], discrete=FALSE, boot=500)
descdist(par.sim.nse$CN2, discrete=FALSE, boot=500)
sd(par.sim.nse[,1])
q = par.sim.nse[,1]
a = min(q)
a
b = max(q)
mean = mean(q)
sd = sd(q)
ptruncnorm(q, a, b, mean(q), sd(q))
norm_CN2<- ptruncnorm(q, a, b, mean(q), sd(q))
plot(density(norm_CN2))
range(q)
norm_CN2<- ptruncnorm(q, min(q), max(q), mean(q), sd(q))
range(norm_CN2)
plot(density(norm_CN2))
fit_n <- fitdist(par.sim.nse$CN2, "norm", weights=wt_total)
fit_n <- fitdist(par.sim.nse$CN2, "norm", weight=wt_total)
range(wt_total)
fit_n <- fitdist(par.sim.nse$CN2, "norm", weights=wt_total)
scaled_wt_total <- wt_total*50000
range(wt_total)
range(scaled_wt_total)
round(scaled_wt_total, 0)
scaled_wt_total <- wt_total*500000
scaled_wt_total <- wt_total*500000
round(scaled_wt_total, 0)
scaled_wt_total <- wt_total*5000000
round(scaled_wt_total, 0)
scaled_wt_total <- wt_total*500000
round(scaled_wt_total, 0)
scaled_wt_total <- wt_total*500000
nn <-round(scaled_wt_total, 0)
nnzero(nn, na.counted = NA)
library(nnzero)
install.packaged("nnzero")
install.packages("nnzero")
length(which(nn !=0))
scaled_wt_total <- wt_total*5*10^4
nn <-round(scaled_wt_total, 0)
length(which(nn !=0))
scaled_wt_total <- wt_total*5*10^5
nn <-round(scaled_wt_total, 0)
length(which(nn !=0))
scaled_wt_total <- wt_total*5*10^6
nn <-round(scaled_wt_total, 0)
length(which(nn !=0))
scaled_wt_total <- wt_total*5*10^7
nn <-round(scaled_wt_total, 0)
length(which(nn !=0))
scaled_wt_total <- wt_total*5*10^5
nn <-round(scaled_wt_total, 0)
length(which(nn !=0))
fit_n <- fitdist(par.sim.nse$ALPH, "norm", weights= scaled_wt_total)
scaled_wt_total
scaled_wt_total <- wt_total*5*10^5
fit_n <- fitdist(par.sim.nse$ALPH, "norm", weights= scaled_wt_total)
fit_n <- fitdist(par.sim.nse$ALPH, "norm", weights= scaled_wt_total)
ns_wt <-round(scaled_wt_total, 0)
scaled_wt_total <- wt_total*5*10^5
ns_wt <-round(scaled_wt_total, 0)
length(which(nn !=0))
scaled_wt_total <- wt_total*5*10^5
ns_wt <-round(scaled_wt_total, 0)
length(which(nn_wt !=0))
scaled_wt_total <- wt_total*5*10^5
ns_wt <-round(scaled_wt_total, 0)
length(which(ns_wt !=0))
scaled_wt_total <- wt_total*5*10^5
sc_wt <-round(scaled_wt_total, 0)
length(which(sc_wt !=0))
fit_n <- fitdist(par.sim.nse$ALPH, "norm", weights= sc_wt)
summary(fit_n)
plot.legend <- c("normal CN2")
denscomp(fit_n, legendtext = plot.legend)
new_wt_total <-ptruncnorm(wt_total, a=min(df$CN2), b = max(wt_total), mean = mean(wt_total) )
range(new_wt_total)
length(new_wt_total)
plot(density(df$CN2,weight = new_wt_total), col = "red")
plot(density(df$CN2,weight = new_wt_total), col = "red")
new_wt_total <-ptruncnorm(wt_total, a=min(df$CN2), b = max(df$CN2), mean = mean(wt_total), sd(wt_total) )
plot(density(df$CN2,weight = new_wt_total), col = "red")
sum(new_wt_total)
sum(wt_total)
fit_n
rm (list = ls())
q()
