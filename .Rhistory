# tom epa windows
of_root <- file.path("c:", "Users", "tpurucke", "git", "wu_redcedar2")
}
data_in_dir <- file.path(of_root, "data_in")
graphics_dir <- file.path(of_root, "graphics")
src_dir <- file.path(of_root, "src")
hpc_data <- file.path(of_root, "hpc_data", "sim57-flux-weekly")
hpc_data_sensitivity <- file.path(of_root, "hpc_data", "sim56-sensitivity")
# load parameters but in list format
# 18 parameter fits for each variable
load(file.path(hpc_data, "fitted_parameters0.RData"))
fitted_parameter_list0 <- fitted_parameter_list
str(fitted_parameter_list)
fitted_parameter_list0[[2]]$estimate
load(file.path(hpc_data, "fitted_parameters1.RData"))
fitted_parameter_list1 <- fitted_parameter_list
fitted_parameter_list1[[2]]$estimate
load(file.path(hpc_data, "fitted_parameters4.RData"))
fitted_parameter_list4 <- fitted_parameter_list
fitted_parameter_list4[[2]]$estimate
load(file.path(hpc_data, "fitted_parameters7.RData"))
fitted_parameter_list7 <- fitted_parameter_list
fitted_parameter_list7[[2]]$estimate
load(file.path(hpc_data, "fitted_parameters10.RData"))
fitted_parameter_list10 <- fitted_parameter_list
fitted_parameter_list10[[2]]$estimate
load(file.path(hpc_data, "fitted_parameters13.RData"))
fitted_parameter_list13 <- fitted_parameter_list
fitted_parameter_list13[[2]]$estimate
# this loads everything for the generation stats
load(file.path(hpc_data, "generation_stats13.RData"))
generation_stats <- generation_stats[1:14,]
# nse scores for each generation
load(file.path(hpc_data, "nses_parameters0.RData"))
nses_parameters0 <- nses_parameters
dim(nses_parameters0)
parameter_names <- colnames(nses_parameters0)[5:22]
parameter_names
load(file.path(hpc_data, "nses_parameters1.RData"))
nses_parameters1 <- nses_parameters
dim(nses_parameters1)
load(file.path(hpc_data, "nses_parameters4.RData"))
nses_parameters4 <- nses_parameters
dim(nses_parameters4)
load(file.path(hpc_data, "nses_parameters7.RData"))
nses_parameters7 <- nses_parameters
dim(nses_parameters7)
load(file.path(hpc_data, "nses_parameters10.RData"))
nses_parameters10 <- nses_parameters
dim(nses_parameters10)
load(file.path(hpc_data, "nses_parameters13.RData"))
nses_parameters13 <- nses_parameters
dim(nses_parameters13)
# parameter inputs for each generation
load(file.path(hpc_data, "parameter_input_sims0.RData"))
parameter_inputs0 <- parameter_input_sims
dim(parameter_inputs0)
load(file.path(hpc_data, "parameter_input_sims1.RData"))
parameter_inputs1 <- parameter_input_sims
dim(parameter_inputs6)
load(file.path(hpc_data, "parameter_input_sims4.RData"))
parameter_inputs4 <- parameter_input_sims
dim(parameter_inputs4)
dim(parameter_inputs1)
load(file.path(hpc_data, "parameter_input_sims4.RData"))
parameter_inputs4 <- parameter_input_sims
dim(parameter_inputs4)
load(file.path(hpc_data, "parameter_input_sims7.RData"))
parameter_inputs7 <- parameter_input_sims
dim(parameter_inputs7)
load(file.path(hpc_data, "parameter_input_sims10.RData"))
parameter_inputs10 <- parameter_input_sims
dim(parameter_inputs10)
load(file.path(hpc_data, "parameter_input_sims13.RData"))
parameter_inputs13 <- parameter_input_sims
dim(parameter_inputs13)
# list of output
load(file.path(hpc_data, "bac_cal0.RData"))
bac_cal_output0 <- bac_cal_output
dim(bac_cal_output0)
load(file.path(hpc_data, "bac_cal1.RData"))
bac_cal_output1 <- bac_cal_output
dim(bac_cal_output1)
load(file.path(hpc_data, "bac_cal4.RData"))
bac_cal_output4 <- bac_cal_output
dim(bac_cal_output4)
load(file.path(hpc_data, "bac_cal7.RData"))
bac_cal_output7 <- bac_cal_output
str(bac_cal_output7)
load(file.path(hpc_data, "bac_cal10.RData"))
bac_cal_output10 <- bac_cal_output
dim(bac_cal_output10)
load(file.path(hpc_data, "bac_cal13.RData"))
bac_cal_output13 <- bac_cal_output
str(bac_cal_output13)
# change to NAs
means_matrix <- matrix(runif(6 * 18, 0, 10), nrow = 6)   # shape: 6 x 18
dim(means_matrix)
sds_matrix   <- matrix(runif(6 * 18, 0.5, 2), nrow = 6)  # shape: 6 x 18
mins_matrix   <- matrix(runif(6 * 18, 0.5, 2), nrow = 6)  # shape: 6 x 18
maxs_matrix   <- matrix(runif(6 * 18, 0.5, 2), nrow = 6)  # shape: 6 x 18
parameter_names
#"CN2.mgt|change = relchg"= runif(nsims, -0.3, 0.3), #
mins_matrix[1:4,1] <- -0.25
maxs_matrix[1:4,1] <- 0.1
#"GWQMN.gw|change = relchg" = runif(nsims, -0.5, 2), #
mins_matrix[1:4,2] <- -0.5
maxs_matrix[1:4,2] <- 0.5
#"ALPHA_BNK.rte|change = absval" =runif(nsims, 0, 1), #large for flat recessions, and small for steep recessions
mins_matrix[1:4,3] <- 0.5
maxs_matrix[1:4,3] <- 1
#"CH_K2.rte|change = absval" = runif(nsims, 0, 50), # changed from(0,250)
mins_matrix[1:4,4] <- 0
maxs_matrix[1:4,4] <- 50
#"CH_N2.rte|change = absval" = runif(nsims, 0.05, 0.15), # changed from (0,0.1)
mins_matrix[1:4,5] <- 0
maxs_matrix[1:4,5] <- 0.1
# TRNSRCH.bsn|change = absval" = runif(nsims, 0, 0.3), # default is 0.00
mins_matrix[1:4,6] <- 0
maxs_matrix[1:4,6] <- 0.3
#CH_N1
mins_matrix[1:4,7] <- 0
maxs_matrix[1:4,7] <- 0.15
#"CH_K1.sub|change = absval" = runif(nsims, 0, 120), #For prennial streams with continuous groundwater contribution, the effective conductivity will be zero.
mins_matrix[1:4,8] <- 0
maxs_matrix[1:4,8] <- 300
#"RCHRG_DP.gw|change = absval" = runif(nsims, 0, 0.5), # default range is (0,1)
mins_matrix[1:4,9] <- 0
maxs_matrix[1:4,9] <- 1
#"SFTMP.bsn|change = absval"= runif(nsims, -5, 5), # changed from (-2,2),default is 1.0
mins_matrix[1:4,10] <- -5
maxs_matrix[1:4,10] <- 5
#"SMTMP.bsn|change = absval"= runif(nsims, -5, 5), # changed from (-2,2),default is 1.0
mins_matrix[1:4,11] <- -5
maxs_matrix[1:4,11] <-5
#"DEP_IMP.hru|change = absval"= runif(nsims, 2000, 6000), # "generation 21 DEP_IMP 4010.712 31.167"
mins_matrix[1:4,12] <- 0
maxs_matrix[1:4,12] <- 6000
#"DDRAIN.mgt|change = absval"= runif(nsims, 500, 1500), # "generation 21 DDRAIN 1105.285 107.537"
mins_matrix[1:4,13] <- 0
maxs_matrix[1:4,13] <- 2000
#"GDRAIN.mgt|change = absval"= runif(nsims, 0, 50), # "generation 21 GDRAIN 24.686 11.354"
mins_matrix[1:4,14] <- 0
maxs_matrix[1:4,14] <- 72
#BACKTKDQ
mins_matrix[1:4,15] <- 0
maxs_matrix[1:4,15] <- 500
#BACT_SWF
mins_matrix[1:4,16] <- 0
maxs_matrix[1:4,16] <- 1
#"THBACT.bsn|change = absval"= runif(nsims, 0, 2), # default value 1.07
mins_matrix[1:4,17] <- 0
maxs_matrix[1:4,17] <- 10
#"WDPRCH.bsn|change = absval"= runif(nsims, 0, 1) #
mins_matrix[1:4,18] <- 0
maxs_matrix[1:4,18] <- 1
# assign values
for(i in 1:18){
means_matrix[1,i] <- fitted_parameter_list0[[i]]$estimate[[1]]
sds_matrix[1,i]<- fitted_parameter_list0[[i]]$estimate[[2]]
means_matrix[2,i] <- fitted_parameter_list1[[i]]$estimate[[1]]
sds_matrix[2,i]<- fitted_parameter_list1[[i]]$estimate[[2]]
means_matrix[3,i] <- fitted_parameter_list4[[i]]$estimate[[1]]
sds_matrix[3,i]<- fitted_parameter_list4[[i]]$estimate[[2]]
means_matrix[4,i] <- fitted_parameter_list7[[i]]$estimate[[1]]
sds_matrix[4,i]<- fitted_parameter_list7[[i]]$estimate[[2]]
means_matrix[5,i] <- fitted_parameter_list10[[i]]$estimate[[1]]
sds_matrix[5,i]<- fitted_parameter_list10[[i]]$estimate[[2]]
means_matrix[6,i] <- fitted_parameter_list13[[i]]$estimate[[1]]
sds_matrix[6,i]<- fitted_parameter_list13[[i]]$estimate[[2]]
}
# Assign level and panel names
levels <- c("gen0", "gen1", "gen4", "gen7", "gen10", "gen13")
levels <- factor(levels, levels = c("gen0", "gen1", "gen4", "gen7", "gen10", "gen13"))
levels <- fct_relevel(levels, "gen0", "gen1", "gen4", "gen7", "gen10", "gen13")
panels <- parameter_names
rownames(means_matrix) <- levels
rownames(sds_matrix) <- levels
rownames(mins_matrix) <- levels
rownames(maxs_matrix) <- levels
colnames(means_matrix) <- panels
colnames(sds_matrix) <- panels
colnames(mins_matrix) <- panels
colnames(maxs_matrix) <- panels
means_matrix
sds_matrix
mins_matrix
maxs_matrix
# Convert to tidy long format
means_long <- as.data.frame(means_matrix) %>%
mutate(level = rownames(means_matrix)) %>%
pivot_longer(-level, names_to = "panel", values_to = "mean")
sds_long <- as.data.frame(sds_matrix) %>%
mutate(level = rownames(sds_matrix)) %>%
pivot_longer(-level, names_to = "panel", values_to = "sd")
mins_long <- as.data.frame(mins_matrix) %>%
mutate(level = rownames(mins_matrix)) %>%
pivot_longer(-level, names_to = "panel", values_to = "mins")
maxs_long <- as.data.frame(maxs_matrix) %>%
mutate(level = rownames(maxs_matrix)) %>%
pivot_longer(-level, names_to = "panel", values_to = "maxs")
parameters2 <- left_join(means_long, sds_long, by = c("level", "panel"))
parameters1 <- left_join(parameters2, mins_long, by = c("level", "panel"))
parameters <- as.data.frame(left_join(parameters1, maxs_long, by = c("level", "panel")))
parameters
colnames(parameters)
# Suppose your long data is in a dataframe called 'df'
df_curves <- parameters %>%
group_by(panel, level) %>%
group_modify(
~{
x = seq(.x$mins, .x$maxs, length.out = 200)
data.frame(
x = x,
density = dnorm(x, mean = .x$mean, sd = .x$sd),
mean = .x$mean,
sd = .x$sd,
min = .x$mins,
max = .x$maxs
)
}
) %>%
ungroup()
ggplot(df_curves, aes(x = x, y = density, color = level)) +
geom_line(size = 1) +
facet_wrap(~ panel, ncol = 6, scales = "free") +
theme_minimal() +
labs(
title = "Posterior Densities by Parameter (Truncated to Initial Uniform Prior)",
x = "Value",
y = "Density"
) +
scale_color_brewer(palette = "Set1")
# Create a grid of x-values covering the full range expected in all densities
x_min <- min(parameters$mean - 3 * parameters$sd)
x_max <- max(parameters$mean + 3 * parameters$sd)
x_vals <- seq(x_min, x_max, length.out = 200)
# For each panel and level, calculate the density
plot_data <- parameters %>%
group_by(panel, level) %>%
do({
data.frame(
x = x_vals,
density = dnorm(x_vals, mean = .$mean, sd = .$sd),
level = .$level,
panel = .$panel
)
}) %>%
ungroup()
ggplot(plot_data, aes(x = x, y = density, color = level)) +
geom_line(size = 1) +
facet_wrap(~ panel, ncol = 6, scales='free') +
theme_minimal() +
labs(
title = "Updated Posterior Densities of Sensitive Parameters",
x = "Value", y = "Density"
) +
scale_color_brewer(palette = "Set1")
load(file.path(hpc_data_sensitivity, "q_obs.RData"))
load(file.path(hpc_data_sensitivity, "bac_obs.RData"))
load(file.path(hpc_data_sensitivity, "bac_sensitivity.RData"))
par_bound <- tibble(
#Hydrology
"CN2.mgt|change = relchg"= c(-0.3,0.3),
"SOL_K(1).sol|change = relchg" = c(-0.8,0.8),
"SOL_AWC(1).sol|change = relchg" = c(-0.8,2),
"OV_N.hru|change = relchg" = c(-0.8,2),
"ALPHA_BF.gw|change = relchg" = c(-0.3,0.3),
"GW_DELAY.gw|change = relchg" = c(-0.75,4),
"GWQMN.gw|change = relchg" = c(-0.5,2),
"HRU_SLP.hru|change = absval" = c(0,1),
"SLSUBBSN.hru|change = relchg" = c(-0.5, 1),
"ALPHA_BNK.rte|change = absval" =c(0, 1),
"CH_K2.rte|change = absval" = c(0,50),
"CH_N2.rte|change = absval" = c(0.05, 0.15),
"ESCO.bsn |change = absval" = c(0, 1),
"EPCO.bsn|change = absval" = c(0, 1),
"TRNSRCH.bsn|change = absval" = c(0,0.3),
"SURLAG.bsn|change = absval" = c(1, 24),
"CH_N1.sub|change = absval" = c(0.05, 0.15),
"CH_K1.sub|change = absval" = c(0, 300),
"REVAPMN.gw |change = absval" = c(0, 1000),
"GW_REVAP.gw|change = absval" = c(0.02, 0.2),
"RCHRG_DP.gw|change = absval" = c(0, 1),
"GW_SPYLD.gw|change = absval" = c(0, 0.4),
"SFTMP.bsn|change = absval"= c(-5, 5),
"SMTMP.bsn|change = absval"= c(-5,5),
"SMFMX.bsn|change = absval"= c(0, 20),
"SMFMN.bsn|change = absval"= c(0, 20),
"TIMP.bsn|change = absval"= c(0.01, 1),
#tile drainage and sediments
"DEP_IMP.hru|change = absval"= c(0,6000),
"DDRAIN.mgt|change = absval"= c(0, 2000),
"TDRAIN.mgt|change = absval"= c(0, 72),
"GDRAIN.mgt|change = absval"= c(0, 100),
"SPCON.bsn|change = absval"= c(0.0001, 0.01),
"SPEXP.bsn|change = absval"= c(1, 2),
"PRF_BSN.bsn|change = absval"= c(0.5, 2),
"ADJ_PKR.bsn|change = absval"= c(0.5, 2),
"BACTKDQ.bsn|change = absval" = c(0, 500),
"BACTMX.bsn|change = absval" = c(7, 20),
"BACT_SWF.bsn|change = absval" = c(0, 1),
"CFRT_KG.mgt|change = relchg" = c(0, 500),
"FRT_SURFACE.mgt|change = absval"= c(0, 1),
"THBACT.bsn|change = absval"= c(0, 10),
"WDPRCH.bsn|change = absval"= c(0, 1),
"WDPQ.bsn|change = absval"= c(0, 1),
#"WGPQ.bsn|change = absval"= c(0, 1),
"WDPS.bsn|change = absval"= c(0, 1),
#"WGPS.bsn|change = absval"= c(0, 1),
"WOF_P.bsn|change = absval"= c(0, 1),
"WDPRES.bsn|change = absval"= c(0, 1))
#45 parameters
View(par_bound)
n_sample <- 5000
sim_parameters <- bac_cal1$parameter$value
sim_bac_concs <- bac_cal1$simulation$bac_out
sim_flows <- bac_cal1$simulation$q_out
# file info
#View(sim_parameters)
#View(sim_bac_concs)
#View(sim_flows)
dim(sim_parameters)
colnames(sim_parameters)
dim(sim_bac_concs)
colnames(sim_bac_concs)
dim(sim_flows)
colnames(sim_flows)
#fix problematic colnames
colnames(sim_parameters)[2] <- "SOL_K"
colnames(sim_parameters)[3] <- "SOL_AWC"
#simulation is for the 365 days of 2013
#drop date column for sim_bac_concs
sim_bac_concs2 <- sim_bac_concs[,-c(1)]
sim_dates <- sim_bac_concs[,1]
#View(sim_bac_concs2)
dim(sim_bac_concs2)
#transpose bacteria concentration data frame
sim_bac_concs3 <- t(sim_bac_concs2)
dim(sim_bac_concs3)
# pcc on row medians
sim_bac_medians <- rowMedians(sim_bac_concs3)
pcc(sim_parameters, sim_bac_medians)
# pcc on row maxs
sim_bac_maxs <- rowMaxs(sim_bac_concs3)
pcc(sim_parameters, sim_bac_maxs)
# drop dates for sim_flows
sim_flows2 <- sim_flows[,-c(1)]
dim(sim_flows2)
#transpose flows data frame
sim_flows3 <- t(sim_flows2)
dim(sim_flows3)
# pcc on row medians
sim_flows_medians <- rowMedians(sim_flows3)
pcc(sim_parameters, sim_flows_medians)
# pcc on row maxs
sim_flows_maxs <- rowMaxs(sim_flows3)
pcc(sim_parameters, sim_flows_maxs)
# flux
sim_flux3 <- sim_bac_concs3*sim_flows3*10^4
dim(sim_flux3)
#pcc on row medians
sim_flux_medians <- rowMedians(sim_flux3)
pcc(sim_parameters, sim_flux_medians)
#pcc on row maxs
sim_flux_maxs <- rowMaxs(sim_flux3)
pcc(sim_parameters, sim_flux_maxs)
#########daily pcc for bacteria and flow
daily_bac_pcc <- matrix(data=NA, nrow=3865, ncol=45)
daily_flows_pcc <- matrix(data=NA, nrow=3865, ncol=45)
daily_flux_pcc <- matrix(data=NA, nrow=3865, ncol=45)
load(file.path(hpc_data_sensitivity, "bac_pcc.RData"))
load(file.path(hpc_data_sensitivity, "flows_pcc.RData"))
load(file.path(hpc_data_sensitivity, "flux_pcc.RData"))
#print violin plot
mklab <- function(y_var){
if(y_var){
names(mf)[response]
} else {
paste(names(mf)[-response], collapse = " : ")
}
}
dim(bac_pcc)
colnames(bac_pcc) <- colnames(sim_parameters)
colnames(flows_pcc) <- colnames(sim_parameters)
colnames(flux_pcc) <- colnames(sim_parameters)
pdf("pcc_violin_5000_45.pdf",width=55,height=30,onefile=TRUE)
vioplot(bac_pcc)
vioplot(flows_pcc)
vioplot(flux_pcc)
dev.off()
colnames(flux_pcc)
flux_pcc_sensitive <- flux_pcc[,c(1,4,6,7,8,9,10,11,14,17,19,20,22,23,26,27,28,30,40,41)]
colnames(flux_pcc_sensitive)
vioplot(flux_pcc_sensitive, col="lightblue")
colnames(flux_pcc)
long_flux_pcc_sensitive <- flux_pcc_sensitive %>%
pivot_longer(cols = everything(), names_to = "parameter", values_to = "pcc")
long_flux_pcc_sensitive <- flux_pcc_sensitive %>%
pivot_longer(cols = everything(), names_to = "parameter", values_to = "pcc")
long_flux_pcc_sensitive <- flux_pcc_sensitive %>%
pivot_longer(cols = everything(), names_to = "parameter", values_to = "pcc")
long_flux_pcc_sensitive <- as.matrix(flux_pcc_sensitive) %>%
pivot_longer(cols = everything(), names_to = "parameter", values_to = "pcc")
long_flux_pcc_sensitive <- as.data.frame(flux_pcc_sensitive) %>%
pivot_longer(cols = everything(), names_to = "parameter", values_to = "pcc")
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin() +
labs(title = "Violin Plot of Diamond Prices by Cut")
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity")
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", alpha = 0.7, linewidth = 0.8) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity")
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", alpha = 0.7, linewidth = 0.8) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity")
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", alpha = 0.7, linewidth = 0.8) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_classic()
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", alpha = 0.7, linewidth = 0.8) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", alpha = 0.7, linewidth = 0.8) +
stat_summary(fun = median, geom = "point", color = "red", size = 3) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", alpha = 0.7, linewidth = 0.8) +
stat_summary(fun = median, geom = "point", color = "red", size = 1) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", alpha = 0.7, linewidth = 0.8) +
stat_summary(fun = median, geom = "point", color = "red", size = 2) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", fill="lightblue", alpha = 0.7, linewidth = 0.8) +
stat_summary(fun = median, geom = "point", color = "red", size = 2) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
# sort by median of absolute values of pcc
long_flux_pcc_sensitiv <- long_flux_pcc_sensitiv %>%
mutate(parameter = fct_reorder(parameter, abs(pcc), .fun = median))
# sort by median of absolute values of pcc
long_flux_pcc_sensitive <- long_flux_pcc_sensitive %>%
mutate(parameter = fct_reorder(parameter, abs(pcc), .fun = median))
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", fill="lightblue", alpha = 0.7, linewidth = 0.8) +
stat_summary(fun = median, geom = "point", color = "red", size = 2) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", fill="lightblue", alpha = 0.7, linewidth = 0.8, width=1.2) +
stat_summary(fun = median, geom = "point", color = "red", size = 2) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
ggplot(long_flux_pcc_sensitive, aes(x = parameter, y = pcc)) +
geom_violin(trim = FALSE, color = "black", fill="lightblue", alpha = 0.7, linewidth = 0.8, width=1.1) +
stat_summary(fun = median, geom = "point", color = "red", size = 2) +
scale_fill_brewer(palette = "Set2") +
coord_flip() +
labs(title = "Violin Plot of Sensitivity for Selected Parameters",
x = "Parameter",
y = "PCC Sensitivity") +
theme_bw()
